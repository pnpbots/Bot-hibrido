# PNP Television Subscription Bot - Hybrid Version
# Docker Compose configuration for complete deployment

version: '3.8'

services:
  # Main bot service
  pnp-bot:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: pnp-telegram-bot
    restart: unless-stopped
    environment:
      # Required environment variables
      - BOT_TOKEN=${BOT_TOKEN}
      - ADMIN_USER_ID=${ADMIN_USER_ID}
      
      # Optional configuration
      - CHANNEL_ID=${CHANNEL_ID:-@your_private_channel}
      - CHANNEL_NAME=${CHANNEL_NAME:-PNP Television}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
      # Database configuration
      - DATABASE_URL=postgresql://pnp_user:pnp_password@postgres:5432/pnp_bot
      
      # Payment links
      - WEEK_PAYMENT_LINK=${WEEK_PAYMENT_LINK}
      - MONTH_PAYMENT_LINK=${MONTH_PAYMENT_LINK}
      - 3MONTH_PAYMENT_LINK=${3MONTH_PAYMENT_LINK}
      - HALFYEAR_PAYMENT_LINK=${HALFYEAR_PAYMENT_LINK}
      - YEAR_PAYMENT_LINK=${YEAR_PAYMENT_LINK}
      - LIFETIME_PAYMENT_LINK=${LIFETIME_PAYMENT_LINK}
      
      # Feature flags
      - ENABLE_SCHEDULER=${ENABLE_SCHEDULER:-true}
      - ENABLE_ADMIN_PANEL=${ENABLE_ADMIN_PANEL:-true}
      - ENABLE_ANALYTICS=${ENABLE_ANALYTICS:-true}
      
      # Performance settings
      - MAX_RETRIES=${MAX_RETRIES:-3}
      - RETRY_DELAY=${RETRY_DELAY:-5}
      
    volumes:
      - bot_data:/app/data
      - bot_logs:/app/logs
      - bot_backups:/app/backups
    depends_on:
      - postgres
      - redis
    networks:
      - pnp_network
    labels:
      - "com.pnp.service=telegram-bot"
      - "com.pnp.version=hybrid"

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: pnp-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=pnp_bot
      - POSTGRES_USER=pnp_user
      - POSTGRES_PASSWORD=pnp_password
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"  # Exposed for debugging (remove in production)
    networks:
      - pnp_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pnp_user -d pnp_bot"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.pnp.service=database"

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: pnp-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-pnp_redis_pass}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"  # Exposed for debugging (remove in production)
    networks:
      - pnp_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.pnp.service=cache"

  # Nginx reverse proxy (optional, for webhook mode)
  nginx:
    image: nginx:alpine
    container_name: pnp-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - pnp-bot
    networks:
      - pnp_network
    labels:
      - "com.pnp.service=proxy"
    profiles:
      - webhook  # Only start when webhook profile is active

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: pnp-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - pnp_network
    labels:
      - "com.pnp.service=monitoring"
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: pnp-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - pnp_network
    labels:
      - "com.pnp.service=visualization"
    profiles:
      - monitoring

  # Log aggregation with ELK Stack (optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: pnp-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - pnp_network
    labels:
      - "com.pnp.service=search"
    profiles:
      - logging

  # Database backup service
  db-backup:
    image: postgres:15-alpine
    container_name: pnp-db-backup
    restart: "no"
    environment:
      - PGPASSWORD=pnp_password
    volumes:
      - bot_backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: /backup.sh
    depends_on:
      - postgres
    networks:
      - pnp_network
    labels:
      - "com.pnp.service=backup"
    profiles:
      - backup

# Named volumes for persistent data
volumes:
  bot_data:
    driver: local
  bot_logs:
    driver: local
  bot_backups:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

# Custom network for service communication
networks:
  pnp_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# Health checks and monitoring
x-healthcheck-common: &healthcheck-common
  interval: 30s
  timeout: 10s
  retries: 3

# Common restart policy
x-restart-policy: &restart-policy
  restart: unless-stopped

# Usage:
# Basic deployment:
#   docker-compose up -d pnp-bot postgres redis
#
# With monitoring:
#   docker-compose --profile monitoring up -d
#
# With webhook support:
#   docker-compose --profile webhook up -d
#
# With full logging:
#   docker-compose --profile logging up -d
#
# All services:
#   docker-compose --profile monitoring --profile webhook --profile logging up -d